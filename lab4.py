# -*- coding: utf-8 -*-
"""lab4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1llPfy8Mis2kXy8ieK4qE35PAK6blXyHD

Cost Function
"""

import matplotlib.pyplot as plt
import numpy as np

x = [1, 2, 3]
y = [2.5, 3.5, 4.5]

hyp = [0.5, 3, 1.5]

# mutiply the original X values by the theta
# to produce hypothesis values for each X
def multiply_matrix(mat, theta):
    mutated = []
    for i in range(len(mat)):
        mutated.append(mat[i] * theta)

    return mutated

# calculate cost by looping each sample
# subtract hyp(x) from y
# square the result
# sum them all together
def calc_cost(m, X, y):
    total = 0
    for i in range(m):
        squared_error = (y[i] - X[i]) ** 2
        total += squared_error

    return total * (1 / (2*m))

for i in range(len(hyp)):
    hyp_values = multiply_matrix(x, hyp[i])

    print("Cost for ", hyp[i], " is ", calc_cost(len(x), y, hyp_values))

"""Gradient Descent"""

def gradient_descent(X, y, theta, alpha, iterations):
    m = len(y)
    cost_history = []

    theta = [theta, 0]

    for _ in range(iterations):

        hypothesis = [theta[0] + theta[1] * x_i for x_i in X]

        error = [hypothesis[i] - y[i] for i in range(m)]

        gradient_0 = (1/m) * sum(error)  # Gradient for theta_0
        gradient_1 = (1/m) * sum([error[i] * X[i] for i in range(m)])  # Gradient for theta_1

        # Update parameters
        theta[0] = theta[0] - alpha * gradient_0
        theta[1] = theta[1] - alpha * gradient_1

        # Calculate cost (Mean Squared Error)
        cost = (1/(2*m)) * sum([(hypothesis[i] - y[i]) ** 2 for i in range(m)])
        cost_history.append(cost)

    return theta, cost_history

theta = 0.5  # Initial value for theta
alpha = 0.000001  # Learning rate
iterations = 1000000

theta, cost_history = gradient_descent(x, y, theta, alpha, iterations)

print("Optimized theta:", theta)
print("Final Cost:", cost_history[-1])

plt.plot(range(iterations), cost_history)
plt.xlabel('Iterations')
plt.ylabel('Cost')
plt.title('Gradient Descent Cost History')
plt.show()